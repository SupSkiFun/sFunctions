
<#
.SYNOPSIS
Outputs an object of Protection Groups from SRM Server.
.DESCRIPTION
Outputs an object of Protection Groups, related Datastores, MoRef and State from SRM Server.
Must be connected to SRM server.
Reports an Error if more than one Datastore is found in a Protection Group
.OUTPUTS
PSCUSTOMOBJECT SupSkiFun.ProtectionGroupInfo
.EXAMPLE
Get-ProtectionGroup
.EXAMPLE
$myvar = Get-ProtectionGroup
#>
function Get-ProtectionGroup
{
	Process
	{
		$srm=$global:DefaultSrmServers
		if(!$srm)
		{
			Write-Host -ForegroundColor Cyan "Connect to an SRM server first"
			break
		}
		$srmed=$srm.extensiondata
		$protgrps=$srmed.Protection.ListProtectionGroups()
		foreach ($protgrp in $protgrps)
		{
			$protgrpinfo = $protgrp.GetInfo()
			$pgname=$protgrpinfo.name
			$pgstate=$protgrp.GetProtectionState()
			$pgdstores=$protgrp.ListProtectedDatastores().moref
			$pgdstorescnt=$pgdstores.count
			$pgdstorename=(get-datastore -id $pgdstores).name
			if ($pgdstorescnt -ne 1)
			{
				$errobj=[pscustomobject]@{
					Name = $pgname
					State = "ERROR"
					Datastore = "Has Two DataStores $pgdstorename"
					MoRef = $protgrp.MoRef
				}
				$errobj.PSObject.TypeNames.Insert(0,'SupSkiFun.ProtectionGroupInfo')
				$errobj
  			}
			$loopobj=[pscustomobject]@{
				Name = $pgname
				State = $pgstate
				Datastore = $pgdstorename
				MoRef = $protgrp.MoRef
			}
			$loopobj.PSObject.TypeNames.Insert(0,'SupSkiFun.ProtectionGroupInfo')
			$loopobj
		}
	}
}

<#
.SYNOPSIS
Outputs an object of Recovery Plans on SRM Server.
.DESCRIPTION
Outputs an object of Recovery Plans, MoRef, State, and affiliated Protection Groups on SRM Server.
Must be connected to SRM server.
.OUTPUTS
PSCUSTOMOBJECT SupSkiFun.RecoveryPlanInfo
.EXAMPLE
Get-RecoveryPlan
.EXAMPLE
$myvar = Get-RecoveryPlan
#>
function Get-RecoveryPlan
{
	Process
	{
		$srm=$global:DefaultSrmServers
		if(!$srm)
		{
			Write-Host -ForegroundColor Cyan "Connect to an SRM server first"
			break
		}
		$srmed=$srm.extensiondata
		$recplans=$srmed.Recovery.ListPlans()
		foreach ($recplan in $recplans)
		{
			$recplaninfo = $recplan.GetInfo()
			$loopobj=[pscustomobject]@{
				Name = $recplaninfo.Name
				MoRef = $recplan.MoRef
				Description = $recplaninfo.Description
				State = $recplaninfo.State
				ProtectionGroupMoRef = $recplaninfo.ProtectionGroups.MoRef
				ProtectionGroupName = $recplaninfo.ProtectionGroups.Getinfo().name
			}
 			$loopobj.PSObject.TypeNames.Insert(0,'SupSkiFun.RecoveryPlanInfo')
			$loopobj
		}
	}
}

<#
.SYNOPSIS
Outputs an object of Protected VMs and relevant information.
.DESCRIPTION
Outputs an object of Protected VM, MoRef, Protection Group, State, Config Status and Faults from SRM Server.
Must be connected to SRM server.
.OUTPUTS
PSCUSTOMOBJECT SupSkiFun.ProtectedVMInfo
.EXAMPLE
Get-ProtectedVM
.EXAMPLE
$myvar = Get-ProtectedVM
#>
function Get-ProtectedVM
{
	Process
	{
		$srm=$global:DefaultSrmServers
		if(!$srm)
		{
			Write-Host -ForegroundColor Cyan "Connect to an SRM server first"
			break
		}
		$srmed = $srm.extensiondata
		$pgrps = $srmed.Protection.ListProtectionGroups()
		foreach ($pgrp in $pgrps)
		{
			$pvms = $pgrp.ListProtectedVms()
			foreach ($pvm in $pvms)
			{
			   	$pvm.vm.UpdateViewData()
				$loopobj=[pscustomobject]@{
					VM = $pvm.vm.config.name
					MoRef = $pvm.Vm.Moref
					ProtectionGroup = $pgrp.GetInfo().Name
					State = $pvm.State
					NeedsConfig = $pvm.NeedsConfiguration
					Faults = $pvm.Faults
				}
			$loopobj.PSObject.TypeNames.Insert(0,'SupSkiFun.ProtectedVMInfo')
			$loopobj
			}
		}
	}
}

<#.Synopsis
Obtains SRM VM Protection Information
.DESCRIPTION
Returns an object of VM, MoRef, Status, ProtectionGroup, ProtectedVM and PeerProtectedVm.
Must be connected to both the local and remote SRM servers.
.PARAMETER VM
Enter or Pipe VM names to check.
.OUTPUTS
PSCUSTOMOBJECT SupSkiFun.SRMVMInfo
.EXAMPLE
Returns object for one VM to the screen:
Get-SRMVM -VM Server01
.EXAMPLE
Places an object of several VMs into a variable:
$myVar = Get-VM -Name Test* | Get-SRMVM
#>
function Get-SRMVM
{
    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory=$true,
			ValueFromPipelineByPropertyName=$true,
			HelpMessage = "Enter one or more VM names"
		)]
		[Alias("Name")]
        [string[]]$VM
	)

    Begin
    {
		$srm=$global:DefaultSrmServers
		if(!$srm)
		{
			Write-Host -ForegroundColor Cyan "Connect to an SRM server first"
			break
		}
		$srmed = $srm.extensiondata
		$pgrps = $srmed.Protection.ListProtectionGroups()
		$nodata = "No Data"
		$errenc = "Error Encountered"
    }

	Process
	{
		foreach ($v in $vm)
		{
			$pinfo = $null ; $vmgds = $null; $tgrp = $null
			try
			{
				$vmg = Get-VM -Name $v -EV err -EA SilentlyContinue
				$vmgds = $vmg.ExtensionData.Config.DatastoreUrl.Name
				$tgrp = $pgrps | where {$_.getinfo().name -match $vmgds}
				if($tgrp -ne $null)
				{
					$pinfo = $tgrp.QueryVmProtection($vmg.ExtensionData.MoRef)
					$loopobj=[pscustomobject]@{
						VM = $vmg.Name
						MoRef = $vmg.ExtensionData.Moref
						Status = $pinfo.Status
						ProtectionGroup = $pinfo.ProtectionGroupName
						ProtectedVm	= $pinfo.ProtectedVm
						PeerProtectedVm = $pinfo.PeerProtectedVm
 					}
				}
				elseif($tgrp -eq $null)
				{
				  	$loopobj=[pscustomobject]@{
						VM = $v
						MoRef = $errenc
						Status = "Protection Group Not Found for Datastore $vmgds"
						ProtectionGroup = $nodata
						ProtectedVm	= $nodata
						PeerProtectedVm = $nodata
 					}
				}
				$loopobj.PSObject.TypeNames.Insert(0,'SupSkiFun.SRMVMInfo')
				$loopobj
			}
			catch
			{
				$errmesg = $err.exception.ToString().split("`t")[3]
				$loopobj=[pscustomobject]@{
					VM = $v
					MoRef = $errenc
					Status = $errmesg
					ProtectionGroup = $nodata
					ProtectedVm	= $nodata
					PeerProtectedVm = $nodata
 				}
				$loopobj.PSObject.TypeNames.Insert(0,'SupSkiFun.SRMVMInfo')
				$loopobj
			}
		}
	}
}

<#
.SYNOPSIS
Sets SRM VM Protection ON or OFF
.DESCRIPTION
Sets SRM VM status to either protected or unprotected.
If protection is specified, it first unprotects, then attempts protection.
Returns an object of VM, MoRef, Status, Task, and Error.
Must be connected to both the local and remote SRM servers.
.PARAMETER VM
Enter or Pipe VM names to check.
.PARAMETER Config
Specify either protected or unprotected.
.OUTPUTS
PSCUSTOMOBJECT SupSkiFun.SRMVMInfo
.EXAMPLE
Unprotect one VM:
Set-SRMVM -VM Server03 -Config Unprotected
.EXAMPLE
Protect one VM:
Set-SRMVM -VM Server04 -Config Protected
.EXAMPLE
Protect multiple VMs returning the object into a variable
$myVar = Get-VM Zlab* | Set-SRMVM -Config Protected
#>
function Set-SRMVM
{
	[CmdletBinding()]

	param
    (
        [Parameter(Mandatory=$true,
			ValueFromPipelineByPropertyName=$true,
			HelpMessage = "Enter one or more VM names"
		)]
		[Alias("Name")]
        [string[]]$VM,

		[Parameter(Mandatory=$true,
			HelpMessage="Enter either Protected or UnProtected"
		)]
        [ValidateSet("Protected" , "UnProtected")]
        [Alias("State")]
        [string]$Config
	)

    Begin
    {
		$srm=$global:DefaultSrmServers
		if(!$srm)
		{
			Write-Host -ForegroundColor Cyan "Connect to an SRM server first"
			break
		}
		$srmed = $srm.extensiondata
		$pgrps = $srmed.Protection.ListProtectionGroups()
		$errenc = "Error Encountered"
		$noact = "No Action Taken"
		$nodata = "No Data"
    }

    Process
    {
		foreach ($v in $vm)
		{
  			$pinfo = $null; $vmgds = $null; $tgrp = $null; $uinfo = $null; $err = $null; $vmg=$null
			$loopobj = $null; $utask = $null; $ptask = $null ; $prinfo = $null
			$vmg = Get-VM -Name $v -EV err -EA SilentlyContinue
			if($err)
			{
			  	$errmesg = $err.exception.ToString().split("`t")[3]
				$loopobj=[pscustomobject]@{
					VM = $v
					MoRef = $errenc
					Task = $noact
					Status = $nodata
					Error = $errmesg
				}
			}

			elseif(!($err))
			{
				$vmgds = $vmg.ExtensionData.Config.DatastoreUrl.Name
				$tgrp = $pgrps | where {$_.getinfo().name -match $vmgds}
			}

			if($tgrp -eq $null -and !($err))
			{
					$loopobj=[pscustomobject]@{
						VM = $vmg.Name
						MoRef = $errenc
						Task = $noact
						Status = $nodata
						Error = "Protection Group Not Found for Datastore $vmgds"
					}
			}
			elseif($tgrp -ne $null -and !($err))
			{
				$utask = $tgrp.UnprotectVms($vmg.ExtensionData.moref)
				while(-not $utask.IsComplete())
				{
					Start-Sleep -Seconds 1
				}
				$uinfo = $utask.getresult()
				$loopobj=[pscustomobject]@{
					VM = $vmg.Name
					MoRef = $vmg.ExtensionData.Moref
					Task = $uinfo.DescriptionId.split(".")[6]
					Status = $uinfo.State
					Error = $uinfo.Error.LocalizedMessage
				}

				if ($config -eq "protected")
				{
					$loopobj.PSObject.TypeNames.Insert(0,'SupSkiFun.SRMVMProtectionResult')
					$loopobj
					$pspec = New-Object VMware.VimAutomation.Srm.Views.SrmProtectionGroupVmProtectionSpec
					$pspec.Vm = $vmg.ExtensionData.MoRef
					$ptask = $tgrp.ProtectVms($pspec)
						while(-not $ptask.IsComplete())
						{
							Start-Sleep -Seconds 1
						}
					$prinfo = $ptask.getresult()
					$loopobj=[pscustomobject]@{
						VM = $vmg.Name
						MoRef = $vmg.ExtensionData.Moref
						Task = $prinfo.DescriptionId.split(".")[6]
						Status = $prinfo.State
						Error = $prinfo.Error.LocalizedMessage
					}
				}
			}
			$loopobj.PSObject.TypeNames.Insert(0,'SupSkiFun.SRMVMProtectionResult')
			$loopobj
		}
    }
}

Export-ModuleMember -Function * -Alias * -Cmdlet * -Variable *