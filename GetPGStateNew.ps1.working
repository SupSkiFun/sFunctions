class sClassNew     #Change
{
    static [hashtable] GetProtGrpInfo ([psobject] $pgrp)
    {
        # $pgcn , $pgnm , $pgok, $pgpn , $pgst , $pgvm = $null 
        $pgnm = $pgrp.GetInfo().Name.ToString()
        $pgvm = $pgrp.ListProtectedVms()
        $pgcn = $pgvm.where({$_.NeedsConfiguration -eq $true}).VmName | Sort-Object
        $pgok = $pgrp.CheckConfigured()
        $pgst = $pgrp.GetProtectionState().ToString()
    }





    
    static [array] GetUnProtVM ( [psobject] $pgrp , [psobject] $pgvn )
    {        
        $dss = Get-Datastore -id ($pgrp.ListProtectedDatastores().Moref)
        $vms = (Get-VM -Datastore $dss).Name
        return $vms.Where({$pgvn -notcontains $_})
    }



}

function Get-SRMProtectionGroupStateNew     #  Change
{
	[CmdletBinding()]
    param
    (
        [Parameter(Mandatory = $true , ValueFromPipeline = $true)]
        [VMware.VimAutomation.Srm.Views.SrmProtectionGroup[]] $ProtectionGroup
	)

	Process
	{
		foreach ($pgrp in $ProtectionGroup)
		{
            $pgcn , $pgnm , $pgok, $pgpn , $pgst , $pgvm = $null 
            $pgnm = $pgrp.GetInfo().Name.ToString()
            $pgvm = $pgrp.ListProtectedVms()
            $pgcn = $pgvm.where({$_.NeedsConfiguration -eq $true}).VmName | Sort-Object
            $pgok = $pgrp.CheckConfigured()
            $pgst = $pgrp.GetProtectionState().ToString()
            
            if ($pgok -eq $false -and $pgst -ne 'Shadowing')
            {
                $pgpn = [sClassNew]::GetUnProtVM($pgrp , ($pgvm.VmName))    #Change
            }
            elseif ($pgok -eq $false -and $pgst -eq 'Shadowing')
            {
                $pgpn = "Run on Protected Site for more info."
            }

            $lo = [pscustomobject]@{
                Name = $pgnm
                State = $pgst
                ConfigOK = $pgok
                ConfigNeeded = $pgcn
                ProtectionNeeded = $pgpn
            }
			$lo.PSObject.TypeNames.Insert(0,'SupSkiFun.SRM.Protection.Group.State')
            $lo
		}
	}
}